// This file is auto-generated by @hey-api/openapi-ts

import { httpResource } from '@angular/common/http';
import { Injectable } from '@angular/core';

import type { Options } from '../../../sdk.gen';
import type {
  AddPetData,
  AddPetResponse,
  CreateUserData,
  CreateUserResponse,
  CreateUsersWithListInputData,
  CreateUsersWithListInputResponse,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByStatusResponse,
  FindPetsByTagsData,
  FindPetsByTagsResponse,
  GetInventoryData,
  GetInventoryResponse,
  GetOrderByIdData,
  GetOrderByIdResponse,
  GetPetByIdData,
  GetPetByIdResponse,
  GetUserByNameData,
  GetUserByNameResponse,
  LoginUserData,
  LoginUserResponse,
  LogoutUserData,
  PlaceOrderData,
  PlaceOrderResponse,
  UpdatePetData,
  UpdatePetResponse,
  UpdatePetWithFormData,
  UpdatePetWithFormResponse,
  UpdateUserData,
  UploadFileData,
  UploadFileResponse,
} from '../../../types.gen';
import {
  addPetRequest,
  createUserRequest,
  createUsersWithListInputRequest,
  deleteOrderRequest,
  deletePetRequest,
  deleteUserRequest,
  findPetsByStatusRequest,
  findPetsByTagsRequest,
  getInventoryRequest,
  getOrderByIdRequest,
  getPetByIdRequest,
  getUserByNameRequest,
  loginUserRequest,
  logoutUserRequest,
  placeOrderRequest,
  updatePetRequest,
  updatePetWithFormRequest,
  updateUserRequest,
  uploadFileRequest,
} from './requests.gen';

@Injectable({
  providedIn: 'root',
})
export class PetServiceResources {
  /**
   * Add a new pet to the store.
   * Add a new pet to the store.
   */
  public addPet<ThrowOnError extends boolean = false>(
    options: () => Options<AddPetData, ThrowOnError>,
  ) {
    return httpResource<AddPetResponse>(() => addPetRequest(options()));
  }

  /**
   * Update an existing pet.
   * Update an existing pet by Id.
   */
  public updatePet<ThrowOnError extends boolean = false>(
    options: () => Options<UpdatePetData, ThrowOnError>,
  ) {
    return httpResource<UpdatePetResponse>(() => updatePetRequest(options()));
  }

  /**
   * Finds Pets by status.
   * Multiple status values can be provided with comma separated strings.
   */
  public findPetsByStatus<ThrowOnError extends boolean = false>(
    options: () => Options<FindPetsByStatusData, ThrowOnError>,
  ) {
    return httpResource<FindPetsByStatusResponse>(() =>
      findPetsByStatusRequest(options()),
    );
  }

  /**
   * Finds Pets by tags.
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   */
  public findPetsByTags<ThrowOnError extends boolean = false>(
    options: () => Options<FindPetsByTagsData, ThrowOnError>,
  ) {
    return httpResource<FindPetsByTagsResponse>(() =>
      findPetsByTagsRequest(options()),
    );
  }

  /**
   * Deletes a pet.
   * Delete a pet.
   */
  public deletePet<ThrowOnError extends boolean = false>(
    options: () => Options<DeletePetData, ThrowOnError>,
  ) {
    return httpResource<unknown>(() => deletePetRequest(options()));
  }

  /**
   * Find pet by ID.
   * Returns a single pet.
   */
  public getPetById<ThrowOnError extends boolean = false>(
    options: () => Options<GetPetByIdData, ThrowOnError>,
  ) {
    return httpResource<GetPetByIdResponse>(() => getPetByIdRequest(options()));
  }

  /**
   * Updates a pet in the store with form data.
   * Updates a pet resource based on the form data.
   */
  public updatePetWithForm<ThrowOnError extends boolean = false>(
    options: () => Options<UpdatePetWithFormData, ThrowOnError>,
  ) {
    return httpResource<UpdatePetWithFormResponse>(() =>
      updatePetWithFormRequest(options()),
    );
  }

  /**
   * Uploads an image.
   * Upload image of the pet.
   */
  public uploadFile<ThrowOnError extends boolean = false>(
    options: () => Options<UploadFileData, ThrowOnError>,
  ) {
    return httpResource<UploadFileResponse>(() => uploadFileRequest(options()));
  }
}

@Injectable({
  providedIn: 'root',
})
export class StoreServiceResources {
  /**
   * Returns pet inventories by status.
   * Returns a map of status codes to quantities.
   */
  public getInventory<ThrowOnError extends boolean = false>(
    options?: () => Options<GetInventoryData, ThrowOnError>,
  ) {
    return httpResource<GetInventoryResponse>(() =>
      getInventoryRequest(options ? options() : undefined),
    );
  }

  /**
   * Place an order for a pet.
   * Place a new order in the store.
   */
  public placeOrder<ThrowOnError extends boolean = false>(
    options?: () => Options<PlaceOrderData, ThrowOnError>,
  ) {
    return httpResource<PlaceOrderResponse>(() =>
      placeOrderRequest(options ? options() : undefined),
    );
  }

  /**
   * Delete purchase order by identifier.
   * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
   */
  public deleteOrder<ThrowOnError extends boolean = false>(
    options: () => Options<DeleteOrderData, ThrowOnError>,
  ) {
    return httpResource<unknown>(() => deleteOrderRequest(options()));
  }

  /**
   * Find purchase order by ID.
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   */
  public getOrderById<ThrowOnError extends boolean = false>(
    options: () => Options<GetOrderByIdData, ThrowOnError>,
  ) {
    return httpResource<GetOrderByIdResponse>(() =>
      getOrderByIdRequest(options()),
    );
  }
}

@Injectable({
  providedIn: 'root',
})
export class UserServiceResources {
  /**
   * Create user.
   * This can only be done by the logged in user.
   */
  public createUser<ThrowOnError extends boolean = false>(
    options?: () => Options<CreateUserData, ThrowOnError>,
  ) {
    return httpResource<CreateUserResponse>(() =>
      createUserRequest(options ? options() : undefined),
    );
  }

  /**
   * Creates list of users with given input array.
   * Creates list of users with given input array.
   */
  public createUsersWithListInput<ThrowOnError extends boolean = false>(
    options?: () => Options<CreateUsersWithListInputData, ThrowOnError>,
  ) {
    return httpResource<CreateUsersWithListInputResponse>(() =>
      createUsersWithListInputRequest(options ? options() : undefined),
    );
  }

  /**
   * Logs user into the system.
   * Log into the system.
   */
  public loginUser<ThrowOnError extends boolean = false>(
    options?: () => Options<LoginUserData, ThrowOnError>,
  ) {
    return httpResource<LoginUserResponse>(() =>
      loginUserRequest(options ? options() : undefined),
    );
  }

  /**
   * Logs out current logged in user session.
   * Log user out of the system.
   */
  public logoutUser<ThrowOnError extends boolean = false>(
    options?: () => Options<LogoutUserData, ThrowOnError>,
  ) {
    return httpResource<unknown>(() =>
      logoutUserRequest(options ? options() : undefined),
    );
  }

  /**
   * Delete user resource.
   * This can only be done by the logged in user.
   */
  public deleteUser<ThrowOnError extends boolean = false>(
    options: () => Options<DeleteUserData, ThrowOnError>,
  ) {
    return httpResource<unknown>(() => deleteUserRequest(options()));
  }

  /**
   * Get user by user name.
   * Get user detail based on username.
   */
  public getUserByName<ThrowOnError extends boolean = false>(
    options: () => Options<GetUserByNameData, ThrowOnError>,
  ) {
    return httpResource<GetUserByNameResponse>(() =>
      getUserByNameRequest(options()),
    );
  }

  /**
   * Update user resource.
   * This can only be done by the logged in user.
   */
  public updateUser<ThrowOnError extends boolean = false>(
    options: () => Options<UpdateUserData, ThrowOnError>,
  ) {
    return httpResource<unknown>(() => updateUserRequest(options()));
  }
}
