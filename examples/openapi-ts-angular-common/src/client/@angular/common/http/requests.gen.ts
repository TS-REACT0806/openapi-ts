// This file is auto-generated by @hey-api/openapi-ts

import type { HttpRequest } from '@angular/common/http';

import { client as _heyApiClient } from '../../../client.gen';
import type { Options } from '../../../sdk.gen';
import type {
  AddPetData,
  CreateUserData,
  CreateUsersWithListInputData,
  DeleteOrderData,
  DeletePetData,
  DeleteUserData,
  FindPetsByStatusData,
  FindPetsByTagsData,
  GetInventoryData,
  GetOrderByIdData,
  GetPetByIdData,
  GetUserByNameData,
  LoginUserData,
  LogoutUserData,
  PlaceOrderData,
  UpdatePetData,
  UpdatePetWithFormData,
  UpdateUserData,
  UploadFileData,
} from '../../../types.gen';

/**
 * Add a new pet to the store.
 * Add a new pet to the store.
 */
export const addPetRequest = <ThrowOnError extends boolean = false>(
  options: Options<AddPetData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'POST',
    responseStyle: 'data',
    url: '/pet',
    ...options,
  });

/**
 * Update an existing pet.
 * Update an existing pet by Id.
 */
export const updatePetRequest = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'PUT',
    responseStyle: 'data',
    url: '/pet',
    ...options,
  });

/**
 * Finds Pets by status.
 * Multiple status values can be provided with comma separated strings.
 */
export const findPetsByStatusRequest = <ThrowOnError extends boolean = false>(
  options: Options<FindPetsByStatusData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/pet/findByStatus',
    ...options,
  });

/**
 * Finds Pets by tags.
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 */
export const findPetsByTagsRequest = <ThrowOnError extends boolean = false>(
  options: Options<FindPetsByTagsData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/pet/findByTags',
    ...options,
  });

/**
 * Deletes a pet.
 * Delete a pet.
 */
export const deletePetRequest = <ThrowOnError extends boolean = false>(
  options: Options<DeletePetData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'DELETE',
    responseStyle: 'data',
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Find pet by ID.
 * Returns a single pet.
 */
export const getPetByIdRequest = <ThrowOnError extends boolean = false>(
  options: Options<GetPetByIdData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Updates a pet in the store with form data.
 * Updates a pet resource based on the form data.
 */
export const updatePetWithFormRequest = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePetWithFormData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'POST',
    responseStyle: 'data',
    url: '/pet/{petId}',
    ...options,
  });

/**
 * Uploads an image.
 * Upload image of the pet.
 */
export const uploadFileRequest = <ThrowOnError extends boolean = false>(
  options: Options<UploadFileData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'POST',
    responseStyle: 'data',
    url: '/pet/{petId}/uploadImage',
    ...options,
  });

/**
 * Returns pet inventories by status.
 * Returns a map of status codes to quantities.
 */
export const getInventoryRequest = <ThrowOnError extends boolean = false>(
  options?: Options<GetInventoryData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/store/inventory',
    ...options,
  });

/**
 * Place an order for a pet.
 * Place a new order in the store.
 */
export const placeOrderRequest = <ThrowOnError extends boolean = false>(
  options?: Options<PlaceOrderData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'POST',
    responseStyle: 'data',
    url: '/store/order',
    ...options,
  });

/**
 * Delete purchase order by identifier.
 * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
 */
export const deleteOrderRequest = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOrderData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'DELETE',
    responseStyle: 'data',
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Find purchase order by ID.
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 */
export const getOrderByIdRequest = <ThrowOnError extends boolean = false>(
  options: Options<GetOrderByIdData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/store/order/{orderId}',
    ...options,
  });

/**
 * Create user.
 * This can only be done by the logged in user.
 */
export const createUserRequest = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUserData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'POST',
    responseStyle: 'data',
    url: '/user',
    ...options,
  });

/**
 * Creates list of users with given input array.
 * Creates list of users with given input array.
 */
export const createUsersWithListInputRequest = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CreateUsersWithListInputData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'POST',
    responseStyle: 'data',
    url: '/user/createWithList',
    ...options,
  });

/**
 * Logs user into the system.
 * Log into the system.
 */
export const loginUserRequest = <ThrowOnError extends boolean = false>(
  options?: Options<LoginUserData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/user/login',
    ...options,
  });

/**
 * Logs out current logged in user session.
 * Log user out of the system.
 */
export const logoutUserRequest = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutUserData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/user/logout',
    ...options,
  });

/**
 * Delete user resource.
 * This can only be done by the logged in user.
 */
export const deleteUserRequest = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'DELETE',
    responseStyle: 'data',
    url: '/user/{username}',
    ...options,
  });

/**
 * Get user by user name.
 * Get user detail based on username.
 */
export const getUserByNameRequest = <ThrowOnError extends boolean = false>(
  options: Options<GetUserByNameData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'GET',
    responseStyle: 'data',
    url: '/user/{username}',
    ...options,
  });

/**
 * Update user resource.
 * This can only be done by the logged in user.
 */
export const updateUserRequest = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>,
): HttpRequest<unknown> =>
  (options?.client ?? _heyApiClient).requestOptions({
    method: 'PUT',
    responseStyle: 'data',
    url: '/user/{username}',
    ...options,
  });
