// This file is auto-generated by @hey-api/openapi-ts

import { Injectable } from '@angular/core';

import type { Client, Options as ClientOptions, TDataShape } from './client';
import { client as _heyApiClient } from './client.gen';
import type {
  AddPetData,
  AddPetErrors,
  AddPetResponses,
  CreateUserData,
  CreateUserErrors,
  CreateUserResponses,
  CreateUsersWithListInputData,
  CreateUsersWithListInputErrors,
  CreateUsersWithListInputResponses,
  DeleteOrderData,
  DeleteOrderErrors,
  DeleteOrderResponses,
  DeletePetData,
  DeletePetErrors,
  DeletePetResponses,
  DeleteUserData,
  DeleteUserErrors,
  DeleteUserResponses,
  FindPetsByStatusData,
  FindPetsByStatusErrors,
  FindPetsByStatusResponses,
  FindPetsByTagsData,
  FindPetsByTagsErrors,
  FindPetsByTagsResponses,
  GetInventoryData,
  GetInventoryErrors,
  GetInventoryResponses,
  GetOrderByIdData,
  GetOrderByIdErrors,
  GetOrderByIdResponses,
  GetPetByIdData,
  GetPetByIdErrors,
  GetPetByIdResponses,
  GetUserByNameData,
  GetUserByNameErrors,
  GetUserByNameResponses,
  LoginUserData,
  LoginUserErrors,
  LoginUserResponses,
  LogoutUserData,
  LogoutUserErrors,
  LogoutUserResponses,
  PlaceOrderData,
  PlaceOrderErrors,
  PlaceOrderResponses,
  UpdatePetData,
  UpdatePetErrors,
  UpdatePetResponses,
  UpdatePetWithFormData,
  UpdatePetWithFormErrors,
  UpdatePetWithFormResponses,
  UpdateUserData,
  UpdateUserErrors,
  UpdateUserResponses,
  UploadFileData,
  UploadFileErrors,
  UploadFileResponses,
} from './types.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

@Injectable({
  providedIn: 'root',
})
export class PetService {
  /**
   * Add a new pet to the store.
   * Add a new pet to the store.
   */
  public addPet<ThrowOnError extends boolean = false>(
    options: Options<AddPetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      AddPetResponses,
      AddPetErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Update an existing pet.
   * Update an existing pet by Id.
   */
  public updatePet<ThrowOnError extends boolean = false>(
    options: Options<UpdatePetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      UpdatePetResponses,
      UpdatePetErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Finds Pets by status.
   * Multiple status values can be provided with comma separated strings.
   */
  public findPetsByStatus<ThrowOnError extends boolean = false>(
    options: Options<FindPetsByStatusData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      FindPetsByStatusResponses,
      FindPetsByStatusErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet/findByStatus',
      ...options,
    });
  }

  /**
   * Finds Pets by tags.
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   */
  public findPetsByTags<ThrowOnError extends boolean = false>(
    options: Options<FindPetsByTagsData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      FindPetsByTagsResponses,
      FindPetsByTagsErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet/findByTags',
      ...options,
    });
  }

  /**
   * Deletes a pet.
   * Delete a pet.
   */
  public deletePet<ThrowOnError extends boolean = false>(
    options: Options<DeletePetData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeletePetResponses,
      DeletePetErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet/{petId}',
      ...options,
    });
  }

  /**
   * Find pet by ID.
   * Returns a single pet.
   */
  public getPetById<ThrowOnError extends boolean = false>(
    options: Options<GetPetByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetPetByIdResponses,
      GetPetByIdErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'api_key',
          type: 'apiKey',
        },
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet/{petId}',
      ...options,
    });
  }

  /**
   * Updates a pet in the store with form data.
   * Updates a pet resource based on the form data.
   */
  public updatePetWithForm<ThrowOnError extends boolean = false>(
    options: Options<UpdatePetWithFormData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      UpdatePetWithFormResponses,
      UpdatePetWithFormErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet/{petId}',
      ...options,
    });
  }

  /**
   * Uploads an image.
   * Upload image of the pet.
   */
  public uploadFile<ThrowOnError extends boolean = false>(
    options: Options<UploadFileData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      UploadFileResponses,
      UploadFileErrors,
      ThrowOnError
    >({
      bodySerializer: null,
      security: [
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/pet/{petId}/uploadImage',
      ...options,
      headers: {
        'Content-Type': 'application/octet-stream',
        ...options.headers,
      },
    });
  }
}

@Injectable({
  providedIn: 'root',
})
export class StoreService {
  /**
   * Returns pet inventories by status.
   * Returns a map of status codes to quantities.
   */
  public getInventory<ThrowOnError extends boolean = false>(
    options?: Options<GetInventoryData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetInventoryResponses,
      GetInventoryErrors,
      ThrowOnError
    >({
      security: [
        {
          name: 'api_key',
          type: 'apiKey',
        },
      ],
      url: '/store/inventory',
      ...options,
    });
  }

  /**
   * Place an order for a pet.
   * Place a new order in the store.
   */
  public placeOrder<ThrowOnError extends boolean = false>(
    options?: Options<PlaceOrderData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      PlaceOrderResponses,
      PlaceOrderErrors,
      ThrowOnError
    >({
      url: '/store/order',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Delete purchase order by identifier.
   * For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.
   */
  public deleteOrder<ThrowOnError extends boolean = false>(
    options: Options<DeleteOrderData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteOrderResponses,
      DeleteOrderErrors,
      ThrowOnError
    >({
      url: '/store/order/{orderId}',
      ...options,
    });
  }

  /**
   * Find purchase order by ID.
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
   */
  public getOrderById<ThrowOnError extends boolean = false>(
    options: Options<GetOrderByIdData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetOrderByIdResponses,
      GetOrderByIdErrors,
      ThrowOnError
    >({
      url: '/store/order/{orderId}',
      ...options,
    });
  }
}

@Injectable({
  providedIn: 'root',
})
export class UserService {
  /**
   * Create user.
   * This can only be done by the logged in user.
   */
  public createUser<ThrowOnError extends boolean = false>(
    options?: Options<CreateUserData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      CreateUserResponses,
      CreateUserErrors,
      ThrowOnError
    >({
      url: '/user',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Creates list of users with given input array.
   * Creates list of users with given input array.
   */
  public createUsersWithListInput<ThrowOnError extends boolean = false>(
    options?: Options<CreateUsersWithListInputData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      CreateUsersWithListInputResponses,
      CreateUsersWithListInputErrors,
      ThrowOnError
    >({
      url: '/user/createWithList',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options?.headers,
      },
    });
  }

  /**
   * Logs user into the system.
   * Log into the system.
   */
  public loginUser<ThrowOnError extends boolean = false>(
    options?: Options<LoginUserData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      LoginUserResponses,
      LoginUserErrors,
      ThrowOnError
    >({
      url: '/user/login',
      ...options,
    });
  }

  /**
   * Logs out current logged in user session.
   * Log user out of the system.
   */
  public logoutUser<ThrowOnError extends boolean = false>(
    options?: Options<LogoutUserData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      LogoutUserResponses,
      LogoutUserErrors,
      ThrowOnError
    >({
      url: '/user/logout',
      ...options,
    });
  }

  /**
   * Delete user resource.
   * This can only be done by the logged in user.
   */
  public deleteUser<ThrowOnError extends boolean = false>(
    options: Options<DeleteUserData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).delete<
      DeleteUserResponses,
      DeleteUserErrors,
      ThrowOnError
    >({
      url: '/user/{username}',
      ...options,
    });
  }

  /**
   * Get user by user name.
   * Get user detail based on username.
   */
  public getUserByName<ThrowOnError extends boolean = false>(
    options: Options<GetUserByNameData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).get<
      GetUserByNameResponses,
      GetUserByNameErrors,
      ThrowOnError
    >({
      url: '/user/{username}',
      ...options,
    });
  }

  /**
   * Update user resource.
   * This can only be done by the logged in user.
   */
  public updateUser<ThrowOnError extends boolean = false>(
    options: Options<UpdateUserData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).put<
      UpdateUserResponses,
      UpdateUserErrors,
      ThrowOnError
    >({
      url: '/user/{username}',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }
}
